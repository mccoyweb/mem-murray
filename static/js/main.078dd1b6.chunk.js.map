{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","flipped","onClick","click","src","cardName","Board","state","deck","finalDeck","flippedCards","start","doubleDeck","this","concat","shuffle","map","name","push","complete","array","i","length","j","Math","floor","random","card","index","updateDeck","setTimeout","check","console","log","setState","handleClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTA8EA,SAASA,EAAKC,GACZ,OACE,yBAAKC,UAAW,QAAUD,EAAME,QAAU,WAAa,IAAKC,QAASH,EAAMI,OACzE,yBAAKH,UAAU,SAAf,KACA,yBAAKA,UAAU,QACb,yBAAKI,IAAKL,EAAMM,SAAW,WAMpBC,M,YArFb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,MAAQ,CACXC,KAAM,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAAW,WAAW,WAAW,WAAW,WAAW,YACxJC,UAAW,GACXC,aAAc,IAEhB,EAAKC,QAPY,E,qEAUV,IAAD,OACFC,EAAaC,KAAKN,MAAMC,KAAKM,OAAOD,KAAKN,MAAMC,MACnDK,KAAKE,QAAQH,GACbA,EAAWI,KAAI,SAAAC,GACb,EAAKV,MAAME,UAAUS,KAAK,CACxBD,OACAhB,SAAS,EACTkB,UAAU,S,8BAKRC,GACN,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,Q,kCAMjCI,EAAMC,GAAQ,IAAD,OACnBC,EAAahB,KAAKN,MAAME,WACvBoB,EAAWD,GAAO3B,SAAWY,KAAKN,MAAMG,aAAaY,OAAS,IACjEO,EAAWD,GAAO3B,SAAU,EAC5BY,KAAKN,MAAMG,aAAaQ,KAAK,CAACS,EAAMC,IACG,IAAnCf,KAAKN,MAAMG,aAAaY,QAE1BQ,YAAW,YACY,IAAjB,EAAKC,UACPF,EAAWD,GAAO3B,SAAU,EAC5B4B,EAAW,EAAKtB,MAAMG,aAAa,GAAG,IAAIT,SAAU,EACpD+B,QAAQC,IAAIL,IAEd,EAAKM,SAAS,CAAExB,aAAc,OAC9B,MAKNG,KAAKqB,SAAS,CACZzB,UAAWoB,M,8BAKb,OAAIhB,KAAKN,MAAMG,aAAa,GAAG,GAAGO,OAASJ,KAAKN,MAAMG,aAAa,GAAG,GAAGO,O,+BAOjE,IAAD,OACP,OACE,yBAAKjB,UAAU,SAEXa,KAAKN,MAAME,UAAUO,KAAI,SAACW,EAAMC,GAC9B,OAAO,kBAAC9B,EAAD,CAAMO,SAAUsB,EAAKV,KAAMd,MAAO,kBAAM,EAAKgC,YAAYR,EAAMC,IAAQ3B,QAAS0B,EAAK1B,kB,GAnEpFmC,IAAMC,WCYXC,MAXf,WACE,OACE,yBAAKtC,UAAU,OACb,4BAAQA,UAAU,cAChB,0DAEF,kBAAC,EAAD,QCEcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.078dd1b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Board.css';\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      deck: ['murray1','murray2','murray3','murray4','murray5','murray6','murray7','murray8','murray9','murray10','murray11','murray12','murray13','murray14','murray15'],\r\n      finalDeck: [],\r\n      flippedCards: []\r\n    };\r\n    this.start();  \r\n  }\r\n\r\n  start() {\r\n    let doubleDeck = this.state.deck.concat(this.state.deck);\r\n    this.shuffle(doubleDeck);\r\n    doubleDeck.map(name => {\r\n      this.state.finalDeck.push({\r\n        name,\r\n        flipped: false,\r\n        complete: false\r\n      })\r\n    });\r\n  }\r\n\r\n  shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  }\r\n\r\n  handleClick(card, index) {\r\n    let updateDeck = this.state.finalDeck;\r\n    if (!updateDeck[index].flipped && this.state.flippedCards.length < 2) {\r\n      updateDeck[index].flipped = true;\r\n      this.state.flippedCards.push([card, index]);\r\n      if (this.state.flippedCards.length === 2) {\r\n        \r\n        setTimeout(() => {\r\n          if (this.check() === false) {\r\n            updateDeck[index].flipped = false;\r\n            updateDeck[this.state.flippedCards[0][1]].flipped = false;\r\n            console.log(index);\r\n          }\r\n          this.setState({ flippedCards: [] });\r\n        },750)\r\n\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      finalDeck: updateDeck\r\n    });\r\n  }\r\n\r\n  check() {\r\n    if (this.state.flippedCards[0][0].name === this.state.flippedCards[1][0].name) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        {\r\n          this.state.finalDeck.map((card, index) => {\r\n            return <Card cardName={card.name} click={() => this.handleClick(card, index)} flipped={card.flipped}/>\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className={\"card\" + (props.flipped ? ' flipped' : '')} onClick={props.click}>\r\n      <div className=\"front\">?</div>\r\n      <div className=\"back\">\r\n        <img src={props.cardName + \".jpg\"}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Mem-Murray: A Memory Game</h1>\n      </header>\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}